// domain.h - описания классов для идентификации различных семейств протоколов сокета


#ifndef DOMAIN_H_
#define DOMAIN_H_


	namespace so { // Протсранство имен сокетов


		// Абстрактный класс для идентификации семейства протоколов сокета

			class domain {


				private:

							
					int id; 	// Идентификатор семейсва протокола сокета


				public:


					// Перечисляемый тип, который хранит константы, идентифицирующие все возможные семейства протокола сокета

						enum { ipv4_id, ipv6_id, local_id, route_id, key_id };


					// Конструктор класса по умолчанию

						domain() { id = UNKNOW_VALUE; }
						
					// Деструктор класса по умолчанию

						virtual ~domain() {}


					// Получение идентификатора семейства протоклов сокета

						int getid() const { return id; }

					// Установка идентификатора семейства протоколов сокета

						void setid(int id_) { id = id_; }
					

			}; // domain



		// Класс для идентификации семейства протоколов ipv4

			class ipv4 : public domain { 


				public: 


					// Конструкторы и деструкторы класса

		
						// Конструктор по умолчанию

							ipv4() { setid(ipv4_id); }

						// Деструктор по умолчанию

							virtual ~ipv4() {}
				

			}; // ipv4



		// Класс для идентификации семейства протоколов ipv6

			class ipv6 : public domain { 


				public: 


					// Конструкторы и деструкторы класса

		
						// Конструктор по умолчанию

							ipv6() { setid(ipv6_id); }

						// Деструктор по умолчанию

							virtual ~ipv6() {}
				

			}; // ipv6
			
			
			
		// Статический объект класса идентификатора семейсва протоколов сокета ipv4
		
			static ipv4 ipv4;
			
		// Статический объект класса идентификатора семейсва протоколов сокета ipv6
		
			static ipv6 ipv6;
		

	} // namespace so


#endif // DOMAIN_H_
